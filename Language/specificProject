import java.sql.Date;
import java.util.*;

public class Main {

    public static class Task {
        String taskName;
        Date taskDate;
        boolean isDone;

        public Task(String taskName, Date taskDate, boolean isDone) {
            this.taskName = taskName;
            this.taskDate = taskDate;
            this.isDone = isDone;
        }

        @Override
        public String toString() {
            return "TaskName: " + taskName + ", TaskDate: " + taskDate + ", isDone: " + isDone;
        }
    }

    public static class Employees {
        String name;
        boolean isFree;

        public Employees(String name, boolean isFree) {
            this.name = name;
            this.isFree = isFree;
        }

        @Override
        public String toString() {
            return "Employee{name='" + name + "', isFree=" + isFree + "}";
        }
    }

    public static class TaskList {

        ArrayList<Task> taskList = new ArrayList<>(List.of(
                new Task("Complete Project", Date.valueOf("2024-11-06"), false),
                new Task("Write Report", Date.valueOf("2024-11-07"), true),
                new Task("Attend Meeting", Date.valueOf("2024-11-08"), false),
                new Task("Review Code", Date.valueOf("2024-11-09"), false),
                new Task("Organize Team Event", Date.valueOf("2024-11-10"), false),
                new Task("Update Documentation", Date.valueOf("2024-11-11"), false)
        ));
        ArrayList<Employees> employeesList = new ArrayList<>(List.of(
                new Employees("Admin", true),
                new Employees("Supreme", false),
                new Employees("Bali", false),
                new Employees("Jack", true),
                new Employees("Alice", true),
                new Employees("Eve", false),
                new Employees("Bob", true)
        ));

        public void displayEmployees() {
            if (employeesList.isEmpty()) {
                System.out.println(": Task list is Empty :");
            } else {
                employeesList.stream().forEach(System.out::println);
            }
        }
        public void AssignEmployee(){
            Scanner sn = new Scanner(System.in) ;
            TaskList task = new TaskList() ;
            task.displayTasks();
            System.out.print("Enter the Task name :");
            String ETname = sn.nextLine() ;
            Optional<Task> taskToEdit = taskList.stream()
                    .filter(t -> t.taskName.equalsIgnoreCase(ETname))
                    .findFirst();
            if(taskToEdit.isPresent()){
                Task Task = taskToEdit.get() ;
                if (Task.isDone) {
                    System.out.println("The task '" + Task.taskName + "' is done.");
                } else {
                    System.out.println("The task '" + Task.taskName + "' is not done.");
                }
                displayEmployees();
                System.out.println("Which employee to assign the task  ::");
                String Ename = sn.nextLine() ;
                Optional<Employees> IsPresent = employeesList.stream().filter(E ->E.name.equalsIgnoreCase(Ename)).findFirst() ;
                if(IsPresent.isPresent()){
                    Employees employeees = IsPresent.get() ;
                    if (employeees.isFree) {
                        System.out.println("The Employee " + employeees.name +" free and Assigned to ."+ Task.taskName);
                        Task.isDone = true;
                        employeees.isFree = false ;
                        task.displayTasks();
                        displayEmployees();
                    } else {
                        System.out.println("The Employee '" + employeees.name + "' is not free.");
                    }
                }else {
                    System.out.println("Employee not found !!");
                    gui();
                }
            }else{
                System.out.println("task not found !");
                gui();
            }

        }

        public void displayTasks() {
            if (taskList.isEmpty()) {
                System.out.println("No tasks available.");
            } else {
                taskList.forEach(System.out::println);
            }
        }

        public void editTask() {
            Scanner sn = new Scanner(System.in);
            System.out.println("Enter task to edit:");
            String taskName = sn.nextLine();

            Optional<Task> taskToEdit = taskList.stream()
                    .filter(t -> t.taskName.equalsIgnoreCase(taskName))
                    .findFirst();

            if (taskToEdit.isPresent()) {
                Task task = taskToEdit.get();
                System.out.println("Current task: " + task);

                try {
                    System.out.println("New task name:");
                    task.taskName = sn.nextLine();

                    System.out.println("Change date? (Yes/No):");
                    if (sn.nextLine().equalsIgnoreCase("Yes")) {
                        System.out.println("Enter new date (YYYY-MM-DD):");
                        try {
                            task.taskDate = Date.valueOf(sn.nextLine());
                        } catch (IllegalArgumentException e) {
                            System.out.println("Invalid date format. Task date not updated.");
                        }
                    }

                    System.out.println("Change completion status? (Yes/No):");
                    if (sn.nextLine().equalsIgnoreCase("Yes")) {
                        System.out.println("Is completed? (Yes/No):");
                        task.isDone = sn.nextLine().equalsIgnoreCase("Yes");
                    }

                    System.out.println("Updated task: " + task);
                } catch (Exception e) {
                    System.out.println("An error occurred while editing the task: " + e.getMessage());
                }
                goBackToMenu();
            } else {
                System.out.println("Task not found.");
                goBackToMenu();
            }
        }

        public void removeTask() {
            displayTasks();
            Scanner sn = new Scanner(System.in);
            System.out.println("Enter the name of the task to remove:");
            String taskNameToRemove = sn.nextLine();

            Optional<Task> taskToRemove = taskList.stream()
                    .filter(task -> task.taskName.equalsIgnoreCase(taskNameToRemove))
                    .findFirst();

            if (taskToRemove.isPresent()) {
                Task task = taskToRemove.get();
                System.out.println("Do you want to remove the task: " + task + " (Yes/No)?");
                String confirmation = sn.nextLine();

                if (confirmation.equalsIgnoreCase("Yes")) {
                    taskList.remove(task);
                    System.out.println("Removed task: " + task);
                    displayTasks();
                } else {
                    System.out.println("Task removal cancelled.");
                }
                goBackToMenu();
            } else {
                System.out.println("Task not found.");
                goBackToMenu();
            }
        }

        public void addTask() {
            Scanner sn = new Scanner(System.in);
            try {
                System.out.print("Enter the task name: ");
                String newTaskName = sn.nextLine();

                System.out.print("Enter the task date (YYYY-MM-DD): ");
                String taskDateInput = sn.nextLine();
                Date newTaskDate = null;

                try {
                    newTaskDate = Date.valueOf(taskDateInput);
                } catch (IllegalArgumentException e) {
                    System.out.println("Invalid date format. Task not added.");
                    return;
                }
                System.out.print("Is the task completed? (Yes/No): ");
                String completionStatus = sn.nextLine();
                boolean isCompleted = completionStatus.equalsIgnoreCase("Yes");

                Task newTask = new Task(newTaskName, newTaskDate, isCompleted);
                taskList.add(newTask);
                System.out.println("Task added: " + newTask);
            } catch (Exception e) {
                System.out.println("An error occurred while adding the task: " + e.getMessage());
            }
        }

        public void goBackToMenu() {
            Scanner sn = new Scanner(System.in);
            System.out.println("\nDo you want to go back to the main menu? (Yes/No):");
            String answer = sn.nextLine();

            if (answer.equalsIgnoreCase("Yes")) {
                gui();
            } else {
                System.out.println("Exiting program.");
                System.exit(0);
            }
        }

        public void gui() {
            Scanner sn = new Scanner(System.in);
            while (true) {
                try {
                    System.out.println("\n--- Main Menu ---");
                    System.out.println("1. Display Tasks");
                    System.out.println("2. Edit Task");
                    System.out.println("3. Remove Task");
                    System.out.println("4. Add Task");
                    System.out.println("5. Exit");
                    System.out.print("Enter your choice: ");
                    int x = sn.nextInt();
                    sn.nextLine();

                    switch (x) {
                        case 1:
                            displayTasks();
                            break;
                        case 2:
                            editTask();
                            break;
                        case 3:
                            removeTask();
                            break;
                        case 4:
                            addTask();
                            break;
                        case 5:
                            System.out.println("Exiting program.");
                            System.exit(0);
                            break;
                        default:
                            System.out.println("Invalid choice, please try again.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    System.out.println("Invalid input. Please enter a valid number.");
                    sn.nextLine();
                }
            }
        }
    }

    public static void main(String[] args) {
        Main app = new Main();
        TaskList taskList = new TaskList();
        taskList.gui() ;
    }
}
